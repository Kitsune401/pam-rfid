#!/usr/bin/env python

"""
pamrfid

Copyright 2014 Philipp Meisberger, Bastian Raschke.
All rights reserved.
"""

import sys 
sys.path.append('/usr/lib')

from pamrfid.version import VERSION
from pamrfid.Config import *

from PyRfid.PyRfid import *

import argparse
import hashlib


class PamRfidCheck(object):
    """
    pamrfid simulation program.
    
    The PyRfid library instance
    @var PyRfid __rfid
    """
    
    __rfid = None
    
    def __init__(self):
        """
        Constructor

        """
    
        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamrfid.conf')

        except:
            e = sys.exc_info()[1]
            print '[Exception] ' + e.message
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyRfid', 'port')
        baudRate = self.__config.readInteger('PyRfid', 'baudRate')

        ## Tries to establish connection
        try:
            self.__rfid = PyRfid(port, baudRate)

        except:
            e = sys.exc_info()[1]
            print '[Exception] The RFID sensor could not be initialized: ' + e.message
            exit(1)

    def checkUser(self, userName):
        """
        Do a RFID simulation for a given user.
        
        @param string userName
        @return boolean
        """
    
        ## Checks if the the user was already added
        if ( self.__config.itemExists('Users', userName) == False ):
            print '[Error] The user "' + userName + '" is not added!'
            return False

        ## Tries to get user information
        try:
            expectedTagHash = self.__config.readString('Users', userName)

        except:
            e = sys.exc_info()[1]
            print '[Exception] ' + e.message
            return False

        ## Tries to check RFID
        try:
            print 'Waiting for tag...'

            ## Read out tag data
            if ( self.__rfid.readTag() != True ):
                raise Exception('User aborted!')

            ## Show additional information
            print '------------------------'
            print 'Tag ID:       ' + self.__rfid.tagId
            print 'Tag type:     ' + self.__rfid.tagType           
            print 'Tag Checksum: ' + self.__rfid.tagChecksum
            print '------------------------'
            
            ## Calculates hash of tag ID
            print 'Calculating hash...'
            tagHash = hashlib.sha256(self.__rfid.rawTag).hexdigest()

            print 'Checking if calculated hash matches stored hash...'

            ## Checks if read hash matches stored hash
            if ( tagHash == expectedTagHash ):
                print 'Hashes match!'
                print 'Check for user "' + userName + '" was successful!'
            else:
                raise Exception('The found tag is not assigned to user!')

        except:
            e = sys.exc_info()[1]
            print '[Exception] Check for user "' + userName + '" failed: ' + e.message
            return False

        return True


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(description = 'pamrfid simulation program:')

    parser.add_argument('--check-user', metavar='NAME', help='Checks RFID tag for an existing user.')
    parser.add_argument('--version', '-v', action='version', version='pamrfid ' + VERSION, help='Prints version and exits.')

    args = vars(parser.parse_args())
        
    if ( args['check_user'] ):
        PamRfidCheck().checkUser(args['check_user'])
    else:
        parser.print_help()
